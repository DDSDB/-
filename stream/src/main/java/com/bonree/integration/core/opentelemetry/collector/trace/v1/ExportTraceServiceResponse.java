// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector/trace/v1/trace_service.proto

package com.bonree.integration.core.opentelemetry.collector.trace.v1;

/**
 * Protobuf type {@code opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse}
 */
public final class ExportTraceServiceResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)
    ExportTraceServiceResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ExportTraceServiceResponse.newBuilder() to construct.
  private ExportTraceServiceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExportTraceServiceResponse() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ExportTraceServiceResponse();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ExportTraceServiceResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            ExportTracePartialSuccess.Builder subBuilder = null;
            if (partialSuccess_ != null) {
              subBuilder = partialSuccess_.toBuilder();
            }
            partialSuccess_ = input.readMessage(ExportTracePartialSuccess.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(partialSuccess_);
              partialSuccess_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return TraceServiceProto.internal_static_opentelemetry_proto_collector_trace_v1_ExportTraceServiceResponse_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return TraceServiceProto.internal_static_opentelemetry_proto_collector_trace_v1_ExportTraceServiceResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ExportTraceServiceResponse.class, Builder.class);
  }

  public static final int PARTIAL_SUCCESS_FIELD_NUMBER = 1;
  private ExportTracePartialSuccess partialSuccess_;
  /**
   * <pre>
   * The details of a partially successful export request.
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   * </pre>
   *
   * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
   * @return Whether the partialSuccess field is set.
   */
  @Override
  public boolean hasPartialSuccess() {
    return partialSuccess_ != null;
  }
  /**
   * <pre>
   * The details of a partially successful export request.
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   * </pre>
   *
   * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
   * @return The partialSuccess.
   */
  @Override
  public ExportTracePartialSuccess getPartialSuccess() {
    return partialSuccess_ == null ? ExportTracePartialSuccess.getDefaultInstance() : partialSuccess_;
  }
  /**
   * <pre>
   * The details of a partially successful export request.
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   * </pre>
   *
   * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
   */
  @Override
  public ExportTracePartialSuccessOrBuilder getPartialSuccessOrBuilder() {
    return getPartialSuccess();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (partialSuccess_ != null) {
      output.writeMessage(1, getPartialSuccess());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (partialSuccess_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPartialSuccess());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ExportTraceServiceResponse)) {
      return super.equals(obj);
    }
    ExportTraceServiceResponse other = (ExportTraceServiceResponse) obj;

    if (hasPartialSuccess() != other.hasPartialSuccess()) return false;
    if (hasPartialSuccess()) {
      if (!getPartialSuccess()
          .equals(other.getPartialSuccess())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPartialSuccess()) {
      hash = (37 * hash) + PARTIAL_SUCCESS_FIELD_NUMBER;
      hash = (53 * hash) + getPartialSuccess().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ExportTraceServiceResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ExportTraceServiceResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ExportTraceServiceResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ExportTraceServiceResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ExportTraceServiceResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ExportTraceServiceResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ExportTraceServiceResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ExportTraceServiceResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ExportTraceServiceResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ExportTraceServiceResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ExportTraceServiceResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ExportTraceServiceResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ExportTraceServiceResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)
      ExportTraceServiceResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TraceServiceProto.internal_static_opentelemetry_proto_collector_trace_v1_ExportTraceServiceResponse_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TraceServiceProto.internal_static_opentelemetry_proto_collector_trace_v1_ExportTraceServiceResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ExportTraceServiceResponse.class, Builder.class);
    }

    // Construct using com.bonree.integration.core.opentelemetry.collector.trace.v1.ExportTraceServiceResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      if (partialSuccessBuilder_ == null) {
        partialSuccess_ = null;
      } else {
        partialSuccess_ = null;
        partialSuccessBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return TraceServiceProto.internal_static_opentelemetry_proto_collector_trace_v1_ExportTraceServiceResponse_descriptor;
    }

    @Override
    public ExportTraceServiceResponse getDefaultInstanceForType() {
      return ExportTraceServiceResponse.getDefaultInstance();
    }

    @Override
    public ExportTraceServiceResponse build() {
      ExportTraceServiceResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public ExportTraceServiceResponse buildPartial() {
      ExportTraceServiceResponse result = new ExportTraceServiceResponse(this);
      if (partialSuccessBuilder_ == null) {
        result.partialSuccess_ = partialSuccess_;
      } else {
        result.partialSuccess_ = partialSuccessBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ExportTraceServiceResponse) {
        return mergeFrom((ExportTraceServiceResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ExportTraceServiceResponse other) {
      if (other == ExportTraceServiceResponse.getDefaultInstance()) return this;
      if (other.hasPartialSuccess()) {
        mergePartialSuccess(other.getPartialSuccess());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ExportTraceServiceResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ExportTraceServiceResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private ExportTracePartialSuccess partialSuccess_;
    private com.google.protobuf.SingleFieldBuilderV3<
        ExportTracePartialSuccess, ExportTracePartialSuccess.Builder, ExportTracePartialSuccessOrBuilder> partialSuccessBuilder_;
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     * @return Whether the partialSuccess field is set.
     */
    public boolean hasPartialSuccess() {
      return partialSuccessBuilder_ != null || partialSuccess_ != null;
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     * @return The partialSuccess.
     */
    public ExportTracePartialSuccess getPartialSuccess() {
      if (partialSuccessBuilder_ == null) {
        return partialSuccess_ == null ? ExportTracePartialSuccess.getDefaultInstance() : partialSuccess_;
      } else {
        return partialSuccessBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    public Builder setPartialSuccess(ExportTracePartialSuccess value) {
      if (partialSuccessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        partialSuccess_ = value;
        onChanged();
      } else {
        partialSuccessBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    public Builder setPartialSuccess(
        ExportTracePartialSuccess.Builder builderForValue) {
      if (partialSuccessBuilder_ == null) {
        partialSuccess_ = builderForValue.build();
        onChanged();
      } else {
        partialSuccessBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    public Builder mergePartialSuccess(ExportTracePartialSuccess value) {
      if (partialSuccessBuilder_ == null) {
        if (partialSuccess_ != null) {
          partialSuccess_ =
            ExportTracePartialSuccess.newBuilder(partialSuccess_).mergeFrom(value).buildPartial();
        } else {
          partialSuccess_ = value;
        }
        onChanged();
      } else {
        partialSuccessBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    public Builder clearPartialSuccess() {
      if (partialSuccessBuilder_ == null) {
        partialSuccess_ = null;
        onChanged();
      } else {
        partialSuccess_ = null;
        partialSuccessBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    public ExportTracePartialSuccess.Builder getPartialSuccessBuilder() {
      
      onChanged();
      return getPartialSuccessFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    public ExportTracePartialSuccessOrBuilder getPartialSuccessOrBuilder() {
      if (partialSuccessBuilder_ != null) {
        return partialSuccessBuilder_.getMessageOrBuilder();
      } else {
        return partialSuccess_ == null ?
            ExportTracePartialSuccess.getDefaultInstance() : partialSuccess_;
      }
    }
    /**
     * <pre>
     * The details of a partially successful export request.
     * If the request is only partially accepted
     * (i.e. when the server accepts only parts of the data and rejects the rest)
     * the server MUST initialize the `partial_success` field and MUST
     * set the `rejected_&lt;signal&gt;` with the number of items it rejected.
     * Servers MAY also make use of the `partial_success` field to convey
     * warnings/suggestions to senders even when the request was fully accepted.
     * In such cases, the `rejected_&lt;signal&gt;` MUST have a value of `0` and
     * the `error_message` MUST be non-empty.
     * A `partial_success` message with an empty value (rejected_&lt;signal&gt; = 0 and
     * `error_message` = "") is equivalent to it not being set/present. Senders
     * SHOULD interpret it the same way as in the full success case.
     * </pre>
     *
     * <code>.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ExportTracePartialSuccess, ExportTracePartialSuccess.Builder, ExportTracePartialSuccessOrBuilder> 
        getPartialSuccessFieldBuilder() {
      if (partialSuccessBuilder_ == null) {
        partialSuccessBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ExportTracePartialSuccess, ExportTracePartialSuccess.Builder, ExportTracePartialSuccessOrBuilder>(
                getPartialSuccess(),
                getParentForChildren(),
                isClean());
        partialSuccess_ = null;
      }
      return partialSuccessBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)
  private static final ExportTraceServiceResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ExportTraceServiceResponse();
  }

  public static ExportTraceServiceResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExportTraceServiceResponse>
      PARSER = new com.google.protobuf.AbstractParser<ExportTraceServiceResponse>() {
    @Override
    public ExportTraceServiceResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ExportTraceServiceResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ExportTraceServiceResponse> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ExportTraceServiceResponse> getParserForType() {
    return PARSER;
  }

  @Override
  public ExportTraceServiceResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

